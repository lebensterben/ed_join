initSidebarItems({"enum":[["Occur","Defines whether a term in a query must be present, should be present or must not be present."],["QueryParserError","Possible error that may happen when parsing a query."]],"fn":[["intersect_scorers","Returns the intersection scorer."]],"struct":[["AllQuery","Query that matches all of the documents."],["AllScorer","Scorer associated to the `AllQuery` query."],["AllWeight","Weight associated to the `AllQuery` query."],["AutomatonWeight","A weight struct for Fuzzy Term and Regex Queries"],["BitSetDocSet","A `BitSetDocSet` makes it possible to iterate through a bitset as if it was a `DocSet`."],["BooleanQuery","The boolean query combines a set of queries"],["ConstScorer","Wraps a `DocSet` and simply returns a constant `Scorer`. The `ConstScorer` is useful if you have a `DocSet` where you needed a scorer."],["EmptyQuery","`EmptyQuery` is a dummy `Query` in which no document matches."],["EmptyScorer","`EmptyScorer` is a dummy `Scorer` in which no document matches."],["EmptyWeight","`EmptyWeight` is a dummy `Weight` in which no document matches."],["Exclude","Filters a given `DocSet` by removing the docs from a given `DocSet`."],["Explanation","Object describing the score of a given document. It is organized in trees."],["FuzzyTermQuery","A Fuzzy Query matches all of the documents containing a specific term that is within Levenshtein distance ```rust #[macro_use] extern crate tantivy; use tantivy::schema::{Schema, TEXT}; use tantivy::{Index, Result, Term}; use tantivy::collector::{Count, TopDocs}; use tantivy::query::FuzzyTermQuery;"],["Intersection","Creates a `DocSet` that iterator through the intersection of two `DocSet`s."],["PhraseQuery","`PhraseQuery` matches a specific sequence of words."],["QueryParser","Tantivy's Query parser"],["RangeQuery","`RangeQuery` match all documents that have at least one term within a defined range."],["RegexQuery","containing a specific term that matches a regex pattern A Fuzzy Query matches all of the documents containing a specific term that is within Levenshtein distance"],["RequiredOptionalScorer","Given a required scorer and an optional scorer matches all document from the required scorer and complements the score using the optional scorer."],["TermQuery","A Term query matches all of the documents containing a specific term."],["Union","Creates a `DocSet` that iterator through the intersection of two `DocSet`s."]],"trait":[["Query","The `Query` trait defines a set of documents and a scoring method for those documents."],["Scorer","Scored set of documents matching a query within a specific segment."],["Weight","A Weight is the specialization of a Query for a given set of segments."]]});