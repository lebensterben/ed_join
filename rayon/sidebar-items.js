initSidebarItems({"fn":[["current_num_threads",""],["current_thread_index",""],["join",""],["join_context",""],["scope",""],["scope_fifo",""],["spawn",""],["spawn_fifo",""]],"mod":[["collections","Parallel iterator types for standard collections"],["iter","Traits for writing parallel programs using an iterator-style interface"],["option","Parallel iterator types for options"],["prelude","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need."],["range","Parallel iterator types for ranges, the type for values created by `a..b` expressions"],["range_inclusive","Parallel iterator types for inclusive ranges, the type for values created by `a..=b` expressions"],["result","Parallel iterator types for results"],["slice","Parallel iterator types for slices"],["str","Parallel iterator types for strings"],["string","This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types."],["vec","Parallel iterator types for vectors (`Vec<T>`)"]],"struct":[["FnContext",""],["Scope",""],["ScopeFifo",""],["ThreadBuilder",""],["ThreadPool",""],["ThreadPoolBuildError",""],["ThreadPoolBuilder",""]]});